#! /usr/bin/python
                     
import curses
import curses.textpad
import traceback

class CursesButton:
    def __init__(self,Window,Y,X,Label,Hotkey=0):
        self.Parent=Window
        self.YParent,self.XParent=Window.getbegyx()
        self.Y=Y
        self.X=X
        self.LabelButton="[ "+Label+" ]"
        self.Label=Label
        self.Width=len(self.LabelButton)+2 # label, plus lines on side
        self.Underline=Underline
        #self.Selected=0
        # Draw the button:
        #curses.textpad.rectangle(Window,Y,X,Y+2,X+self.Width-1)
        # Draw the button label:
        #Window.addstr(Y+1,X+1,self.LabelButton,curses.color_pair(4))
        # Make the hotkey stand out:
        #Window.addstr(Y+1,X+Underline+1,self.LabelButton[Underline],curses.A_REVERSE|curses.color_pair(3))
        #Window.addstr(Y+1,X+Underline+1,self.LabelButton[Underline],curses.A_REVERSE|curses.color_pair(5))
        #Window.addstr(3,(quit_sub_box_frame_num_cols/2)-((len(yes_text)+4)),"[ ",curses.color_pair(1))
        #Window.addstr(yes_text[:1],curses.color_pair(6))
        #Window.addstr(yes_text[-int(int(len(yes_text))-1):],curses.color_pair(1))
        #Window.addstr(" ]",curses.color_pair(1))
        #Window.nodelay(1)
        Window.refresh()
    
    def Select(self):
        self.Parent.addstr(self.Y+1,self.X+1,self.LabelButton,curses.color_pair(1))
        self.Parent.addstr(self.Y+1,self.X+self.Underline+1,self.LabelButton[Underline],curses.A_REVERSE|curses.color_pair(3))
        self.Parent.move(self.Y+1,self.X+self.Underline+1)
        self.Selected=1

    def UnSelect(self):
        self.Parent.addstr(self.Y+1,self.X+1,self.LabelButton,curses.color_pair(4))
        self.Parent.addstr(self.Y+1,self.X+self.Underline+1,self.LabelButton[Underline],curses.A_REVERSE|curses.color_pair(3))
        self.Selected=0

    def SelectedState(self):
        #display_message(str(self.Selected))
        if  self.Selected==1:
            return 1
        else:
            return 0

    def KeyPressed(self,Char):
        
        if (Char>255): return 0 # skip control-characters
        if chr(Char).upper()==self.LabelButton[self.Underline]:
            return 1
        else:
            return 0
    def MouseClicked(self,MouseEvent):
        (id,x,y,z,event)=MouseEvent
        if (self.YParent+3 <= y <= self.YParent+3) and (self.X+self.XParent <= x < self.X+self.XParent+self.Width-1):
            return 1
        else:
            return 0

def display_top_menu():
    num_lines,num_cols = screen.getmaxyx()
    #Creat a sub window
    top_menu_box=screen.subwin(0,0,0,0)
    top_menu_box_num_lines,top_menu_box_num_cols = top_menu_box.getmaxyx()
    if curses.has_colors():
        top_menu_box.addstr(0,0,str(" " * int(top_menu_box_num_cols)),curses.color_pair(1))
        top_menu_box.bkgdset(ord(' '), curses.color_pair(1))

    top_menu_box.addstr(0,0,"GalaxieDrake")
    top_menu_box.refresh()
    #screen.addstr(0,0,str(" " * int(num_cols)),curses.color_pair(1))
    #top_menu_chain = "GalaxieDrake"
    #screen.addstr(0,0,str(top_menu_chain),curses.color_pair(1))

def display_help_box():
    num_lines,num_cols = screen.getmaxyx()
    #Creat a sub window
    help_box=screen.subwin(num_lines-4,0,1,0)
    self_num_lines,selft_num_cols = help_box.getmaxyx()
    #Put the Background color    
    if curses.has_colors():
        for I in range(1,self_num_lines-1):
            help_box.addstr(I,1,str(" " * int(selft_num_cols-2)),curses.color_pair(3))
        help_box.bkgdset(ord(' '), curses.color_pair(3))
    help_box.box()
    help_box.addstr(0,1,"Help")

    help_box.refresh()

def display_source_box():
    num_lines,num_cols = screen.getmaxyx()
    #Creat a sub window
    source_box=screen.subwin(num_lines-4,0,1,0)
    self_num_lines,selft_num_cols = source_box.getmaxyx()
    #Put the Background color    
    if curses.has_colors():
        for I in range(1,self_num_lines-1):
            source_box.addstr(I,1,str(" " * int(selft_num_cols-2)),curses.color_pair(3))
        source_box.bkgdset(ord(' '), curses.color_pair(3))
    source_box.box()
    source_box.addstr(0,1,"Source")

    source_box.refresh()

def display_summary_box():
    num_lines,num_cols = screen.getmaxyx()
    #Creat a sub window
    summary_box=screen.subwin(num_lines-4,0,1,0)
    self_num_lines,selft_num_cols = summary_box.getmaxyx()
    #Put the Background color    
    if curses.has_colors():
        for I in range(1,self_num_lines-1):
            summary_box.addstr(I,1,str(" " * int(selft_num_cols-2)),curses.color_pair(3))
        summary_box.bkgdset(ord(' '), curses.color_pair(3))
    summary_box.box()
    summary_box.addstr(0,1,"Summary")

    summary_box.refresh()

def display_video_box():
    num_lines,num_cols = screen.getmaxyx()
    #Creat a sub window
    video_box=screen.subwin(num_lines-4,0,1,0)
    self_num_lines,selft_num_cols = video_box.getmaxyx()
    #Put the Background color    
    if curses.has_colors():
        for I in range(1,self_num_lines-1):
            video_box.addstr(I,1,str(" " * int(selft_num_cols-2)),curses.color_pair(3))
        video_box.bkgdset(ord(' '), curses.color_pair(3))
    video_box.box()
    video_box.addstr(0,1,"Video")

    video_box.refresh()

def display_audio_box():
    num_lines,num_cols = screen.getmaxyx()
    #Creat a sub window
    audio_box=screen.subwin(num_lines-4,0,1,0)
    self_num_lines,selft_num_cols = audio_box.getmaxyx()
    #Put the Background color    
    if curses.has_colors():
        for I in range(1,self_num_lines-1):
            audio_box.addstr(I,1,str(" " * int(selft_num_cols-2)),curses.color_pair(3))
        audio_box.bkgdset(ord(' '), curses.color_pair(3))
    audio_box.box()
    audio_box.addstr(0,1,"Audio")

    audio_box.refresh()


def display_quit_box():
    title_text="The Galaxie Drake"
    message_text="Do you really want to quit the Galaxie Drake?"
    yes_text="Yes"
    no_text="No "
    
    num_lines,num_cols = screen.getmaxyx()
    quit_box=screen.subwin(num_lines-4,0,1,0)
    quit_box_num_lines,quit_box_num_cols = quit_box.getmaxyx()

    if curses.has_colors():
        #Put the Background color
        for I in range(1,quit_box_num_lines):
            quit_box.addstr(I,0,str(" " * int(quit_box_num_cols-1)),curses.color_pair(3))
        
        quit_box.bkgdset(ord(' '), curses.color_pair(3))

    quit_box.box()
    quit_box.addstr(0,1,"Quit")

    if quit_box_num_lines > 9 and quit_box_num_cols > len(message_text)+10:
        quit_sub_box=screen.subwin(7, len(message_text)+8,(quit_box_num_lines/3),(((quit_box_num_cols)-(len(message_text)+6))/2))
        quit_sub_box_num_lines,quit_sub_box_num_cols = quit_sub_box.getmaxyx()
        if curses.has_colors():
        #Put the Background color
            for I in range(0,quit_sub_box_num_lines):
                quit_sub_box.addstr(I,0,str(" " * int(quit_sub_box_num_cols-1)),curses.color_pair(4))
        
        quit_sub_box.bkgdset(ord(' '), curses.color_pair(4))
        quit_sub_box_frame=quit_sub_box.derwin(5,len(message_text)+5,1,1)
        quit_sub_box_frame_num_lines,quit_sub_box_frame_num_cols = quit_sub_box_frame.getmaxyx()

        #if curses.has_colors():
        #    #Put the Background color
        #    for I in range(1,quit_sub_box_num_lines-1):
        #        quit_sub_box.addstr(I,0,str(" " * int(quit_sub_box_num_cols-1)),curses.color_pair(3))
        #    
        #    quit_sub_box.bkgdset(ord(' '), curses.color_pair(3))
        quit_sub_box_frame.box()
        #Title
        quit_sub_box_frame.addstr(0,(quit_sub_box_frame_num_cols/2)-(len(title_text)/2),title_text,curses.color_pair(5))
        #Texte
        quit_sub_box_frame.addstr(1,2,message_text,curses.color_pair(4))
        #Buttons
        
        #Yes
        global YesButton;
        global NoButton;
        YesButton=CursesButton(quit_sub_box_frame,2,(quit_sub_box_frame_num_cols/2)-((len(yes_text)+4))-3,yes_text)
        #YesButton.Select()
        NoButton=CursesButton(quit_sub_box_frame,2,(quit_sub_box_frame_num_cols/2)-1,no_text)
        if quit_yesno:
            YesButton.Select()
            NoButton.UnSelect()
        else:
            YesButton.UnSelect()
            NoButton.Select()

        global Buttons
        Buttons=[YesButton,NoButton]
        #quit_sub_box_frame.addstr(3,(quit_sub_box_frame_num_cols/2)-((len(yes_text)+4)),"[ ",curses.color_pair(1))
        #quit_sub_box_frame.addstr(yes_text[:1],curses.color_pair(6))
        #quit_sub_box_frame.addstr(yes_text[-int(int(len(yes_text))-1):],curses.color_pair(1))
        #quit_sub_box_frame.addstr(" ]",curses.color_pair(1))
        #Space
        #quit_sub_box_frame.addstr("  ")
        #No
        #quit_sub_box_frame.addstr("[ ",curses.color_pair(4))
        #yes_pos_column, yes_pos_line=quit_sub_box_frame.getyx()
        #y_pos=
        #quit_sub_box_frame.addstr(no_text[:1],curses.color_pair(5))
        #quit_sub_box_frame.addstr(no_text[-int(int(len(no_text))-1):],curses.color_pair(4))
        #quit_sub_box_frame.addstr(" ]",curses.color_pair(4))

        #curses.curs_set(1)
        #quit_sub_box_frame.chgat(yes_pos_column,yes_pos_line, 1, curses.color_pair(4))
        quit_sub_box_frame.refresh()
        quit_sub_box.refresh()
    quit_box.refresh()


def display_message(message):
    num_lines,num_cols = screen.getmaxyx()
    message_chain = str(message)
    spacing=num_cols - len(message_chain)
    #screen.addstr(num_lines-2,1,str(" " * int(num_cols)))
    screen.addstr(num_lines-2,1,str(message_chain))
    screen.refresh()

def display_bottom_button(item_list):
    #item_list=("Help" "Source" "Summary" "Video" "Audio" "Subtitles" "Chapter" "Tags" "Encode" "Quit")
    max_button_number=10
    req_button_number=len(item_list)
    if req_button_number > max_button_number:
        req_button_number=max_button_number
    min_button_size=7
    num_lines,num_cols= screen.getmaxyx()


    #Div the cols by the number of button it have to be creat
    aviable_per_item=int(num_cols / req_button_number)
    #Remove the "F10" label space + 1 char for the button use by the button
    aviable_per_item=int(aviable_per_item - 3)
    
    #Size Bug it crash about display size, by reduse the number of button it can be display
    max_can_be_display = 1
    for I in range(1,req_button_number+1):
        cumul= 0
        for U in range(0,max_can_be_display):
            cumul= cumul + len(str(item_list[U]))
        if num_cols-1 > cumul+int((3*max_can_be_display)+1):
            #Put the entire line with curses.color_pair(1))
            screen.addstr(num_lines-1,0,str(" " * int(num_cols-1)),curses.color_pair(1))
            max_can_be_display = max_can_be_display+1

        
    #debug="num_cols="+str(num_cols)+" MERDE="+str(cumul+int((2*max_can_be_display)+1))+" can_be_display="+str(max_can_be_display)
    #display_message(debug)


    screen.addstr(num_lines-1,0,"",curses.color_pair(2))
    for count in range(0,max_can_be_display-1):
        if len(str(count+1)) == 2:
            screen.addstr(str(count+1),curses.color_pair(226)|curses.A_BOLD)
            screen.addstr(item_list[count],curses.color_pair(1))
            spacing = (aviable_per_item - len(item_list[count]) - 1)
            screen.addstr(str(" " * int(spacing)),curses.color_pair(1))
        elif len(str(count+1)) == 1:
            screen.addstr(" ",curses.COLOR_WHITE|curses.COLOR_BLACK)
            screen.addstr(str(count+1),curses.color_pair(2)|curses.A_BOLD)
            screen.addstr(item_list[count],curses.color_pair(1))
            spacing=aviable_per_item - len(item_list[count])
            screen.addstr(str(" " * int(spacing)),curses.color_pair(1))

    screen.refresh()

def refresh_box():
    if selected_box==1:
            display_help_box()
    elif selected_box==2:
            display_source_box()
    elif selected_box==3:
            display_summary_box()
    elif selected_box==4:
            display_video_box()
    elif selected_box==5:
            display_audio_box()
    elif selected_box==10:
            display_quit_box()


def main(stdscr):
    global screen
    screen = stdscr
    screen.refresh()

    global selected_box
    selected_box=2


    global Underline
    Underline=2
    
    global quit_yesno
    quit_yesno=1

    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_CYAN)
    curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_BLUE)
    curses.init_pair(4, curses.COLOR_BLACK, curses.COLOR_WHITE)
    #Dialog Windows Buttons
    curses.init_pair(5, curses.COLOR_BLUE, curses.COLOR_WHITE)
    curses.init_pair(6, curses.COLOR_BLUE, curses.COLOR_CYAN)


    curses.curs_set(1)
    screen.clear()
    screen.keypad(1)
    curses.mousemask(1)

    display_top_menu()
    refresh_box()
    display_message("")
    display_bottom_button(["Help", "Source", "Summary", "Video", "Audio", "Subtitles", "Chapter", "Tags", "Encode", "Quit"])
    screen.refresh()
    Action=""
    
    while True:
        event = screen.getch()
        if (event==-1):
            continue
        screen.clear()
        display_top_menu()
        refresh_box()
        display_bottom_button(["Help", "Source", "Summary", "Video", "Audio", "Subtitles", "Chapter", "Tags", "Encode", "Quit"])
        
        if selected_box==10:
            for Button in Buttons:
                if Button.KeyPressed(event):
                    Action=Button.Label
                    display_message(Action)
            # Handle mouse-events:
            if (event==curses.KEY_MOUSE):
                MouseEvent=curses.getmouse()
                for Button in Buttons:
                    if Button.MouseClicked(MouseEvent):
                        Action=Button.Label
                        display_message(Action)
            elif event == curses.KEY_RIGHT:
                #display_message("The User Pressed RIGHT")
                if quit_yesno:
                    quit_yesno=0
                    YesButton.UnSelect()
                    NoButton.Select()
                else:
                    quit_yesno=1
                    YesButton.Select()
                    NoButton.UnSelect()
            elif event == curses.KEY_LEFT:
                #display_message("The User Pressed LEFT "+str(YesButton.SelectedState()))
                if quit_yesno:
                    quit_yesno=0
                    YesButton.UnSelect()
                    NoButton.Select()
                else:
                    quit_yesno=1
                    YesButton.Select()
                    NoButton.UnSelect()
            elif event == curses.KEY_ENTER or event == ord("\n"):
                   if quit_yesno:
                        Action="Yes"
                   if not quit_yesno:
                        Action="No"
            
            elif event == 27:
                screen.nodelay(1)
                n = screen.getch()
                if n == -1:
                # Escape was pressed
                    Action="No"
                screen.nodelay(0)      

            refresh_box()
        #if Action!="": break
        if event == ord("q"):
            display_message("The User Pressed Q")
            break
        
        elif event == ord("\t"):
            display_message("The User Pressed TAB")
        elif event == curses.KEY_UP:
            display_message("The User Pressed UP")
        elif event == curses.KEY_DOWN:
            display_message("The User Pressed DOWN")
        elif event == curses.KEY_RIGHT:
            display_message("The User Pressed RIGHT")
        elif event == curses.KEY_LEFT:
            display_message("The User Pressed LEFT")
        elif event == curses.KEY_F1:
            display_message("The User Pressed F1")
            selected_box=1
            refresh_box()
        elif event == curses.KEY_F2:
            display_message("The User Pressed F2")
            selected_box=2
            refresh_box()
        elif event == curses.KEY_F3:
            display_message("The User Pressed F3")
            selected_box=3
            refresh_box()
        elif event == curses.KEY_F4:
            display_message("The User Pressed F4")
            selected_box=4
            refresh_box()
        elif event == curses.KEY_F5:
            display_message("The User Pressed F5")
            selected_box=5
            refresh_box()
        elif event == curses.KEY_F6:
            display_message("The User Pressed F6")
        elif event == curses.KEY_F7:
            display_message("The User Pressed F7")
        elif event == curses.KEY_F8:
            display_message("The User Pressed F8")
        elif event == curses.KEY_F9:
            display_message("The User Pressed F9")
        elif event == curses.KEY_F10:
            #display_message("The User Pressed F10")
            selected_box=10
            refresh_box()
        elif event == curses.KEY_ENTER:
            display_message("The User Pressed ENTER")
        elif event == curses.KEY_IC:
            display_message("The User Pressed IC")
        elif (Action[:1]=="Y"):
            display_message("The User selected "+Action)
            break
        elif (Action[:1]=="N"):
            quit_yesno=1   
            selected_box=3
            refresh_box()
            display_message("The User selected "+Action)
        else:
            display_message("")
            pass     
        screen.refresh()
        Action=""

if __name__ == '__main__':
    try:
        curses.wrapper(main)
    except:
        traceback.print_exc()
